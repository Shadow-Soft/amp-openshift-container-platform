{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "baseUrl": {
            "type": "string",
            "metadata": {
                "description": "Base URL for Marketplace Deployment",
                "artifactsBaseUrl": ""
            },
            "defaultValue": "https://raw.githubusercontent.com/Shadow-Soft/amp-openshift-container-platform/master"
        },
	"apiVersionCompute": {
	        "type": "string",
	        "defaultValue": "2017-03-30",
	        "metadata": {
                "description": "The ARM API version used for compute."
            }
	},
        "apiVersionNetwork": {
	        "type": "string",
	        "defaultValue": "2017-09-01",
	        "metadata": {
                "description": "The ARM API version used for networking."
            }
	},
        "apiVersionStorage": {
	        "type": "string",
	        "defaultValue": "2017-06-01",
	        "metadata": {
                "description": "The ARM API version used for storage."
            }
	},
	"apiVersionLinkTemplate": {
	        "type": "string",
	        "defaultValue": "2015-01-01",
	        "metadata": {
                "description": "The ARM API version used for Link Templates."
            }
	},
        "openshiftInfraHostname": {
            "type": "string",
            "defaultValue": "mycluster",
            "minLength": 1,
            "maxLength": 20,
            "metadata": {
                "description": "OpenShift cluster prefix.  Used to generate master, infra and node hostnames.  Maximum of 20 characters."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "ocpadmin",
            "minLength": 1,
            "metadata": {
                "description": "Administrator username on all VMs and first user created for OpenShift login"
            }
        },
        "infraInstanceCount": {
            "type": "int",
            "defaultValue": 0,
	        "minValue": 0,
            "metadata": {
                "description": "Number of infrastructure node instances"
            }
        },
        "infraVmSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "allowedValues": [
                "Standard_DS2_v2",
                "Standard_DS3_v2",
				"Standard_DS4_v2"
            ],
            "minLength": 1,
            "metadata": {
                "description": "Size of infrastructure VMs"
            }
        },
        "dataDiskSize": {
            "type": "string",
            "defaultValue": "128",
            "allowedValues": [
                "128",
                "256",
		        "512"
            ],
            "minLength": 1,
            "metadata": {
                "description": "Size of Data Disks "
            }
        },
        "rhsmUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Red Hat Subscription Manager Username or Organization ID. If usernamepassword selected in previous input, then use Username; otherwise entier Organization ID. To find your Organization ID, run on registered server: subscription-manager identity"
            }
        },
        "rhsmPassword": {
            "type": "securestring",
            "minLength": 1,
            "metadata": {
                "description": "Red Hat Subscription Manager Password or Activation Key. To find or create your Activation Key, go to: https://access.redhat.com/management/activation_keys"
            }
        },
        "rhsmPoolId": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Red Hat Subscription Manager Pool ID with OpenShift entitlements. To find it, run on registered server: subscription-manager list"
            }
        },
        "sshPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH public key for all VMs"
            }
        }
    },
    "variables": {
        "apiVersionCompute": "[parameters('apiVersionCompute')]",
        "apiVersionNetwork": "[parameters('apiVersionNetwork')]",
        "apiVersionStorage": "[parameters('apiVersionStorage')]",
        "apiVersionLinkTemplate": "[parameters('apiVersionLinkTemplate')]",
        "openshiftInfraHostname": "[parameters('openshiftInfraHostname')]",
        "newStorageAccountInfra": "[concat('infra', uniqueString(concat(resourceGroup().id, 'isa')))]",
        "diagStorageAccount": "[concat('diag', uniqueString(concat(resourceGroup().id, 'dsa')))]",
        "virtualNetworkName": "openshiftvnet",
        "masterSubnetName": "mastersubnet",
        "infraLbPublicIpDnsLabel": "[concat('infradns', uniqueString(concat(resourceGroup().id, 'infra')))]",
        "infraLoadBalancerName": "[concat(variables('openshiftInfraHostname'), 'lb')]",
        "infraPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('infraLbPublicIpDnsLabel'))]",
        "infraLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('infraLoadBalancerName'))]",
        "infraLbFrontEndConfigId": "[concat(variables('infraLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
        "infraLbBackendPoolId": "[concat(variables('infraLbId'),'/backendAddressPools/loadBalancerBackend')]",
        "infraLbHttpProbeId": "[concat(variables('infraLbId'),'/probes/httpProbe')]",
        "infraLbHttpsProbeId": "[concat(variables('infraLbId'),'/probes/httpsProbe')]",
        "infraLbCockpitProbeId": "[concat(variables('infraLbId'),'/probes/cockpitProbe')]",
        "redHatTags": {
            "app": "OpenShift",
            "provider": "9d2c71fc-96ba-4b4a-93b3-14def5bc96fc"
        },
        "infraVmSize": "[parameters('infraVmSize')]",
        "infraInstanceCount": "[parameters('infraInstanceCount')]",
        "dataDiskSize": "[parameters('dataDiskSize')]",
		"nodePrepScriptFileName": "nodePrep.sh",
		"nodePrepScriptUrl": "[concat(parameters('baseUrl'), '/scripts/nodePrep.sh')]",
        "clusterNodeDeploymentTemplateUrl": "[concat(parameters('baseUrl'), '/nested/galleryclusternode.json')]",
		"osType": {
            "publisher": "redhat",
            "offer": "rhel-byol",
            "sku": "rhel74",
            "version": "latest"
        },
        "plan": {
            "publisher": "redhat",
            "product": "rhel-byol",
            "name": "rhel74"
        },
        "singlequote": "'",
        "sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(variables('openshiftInfraHostname'), '-nsg')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "InfraNSG",
                "provider": "[variables('redHatTags').provider]",
                "app": "[variables('redHatTags').app]"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "allowSSHin_all",
                        "properties": {
                            "description": "Allow SSH in from all locations",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowHTTPSIn_all",
                        "properties": {
                            "description": "Allow HTTPS connections from all locations",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowHTTPIn_all",
                        "properties": {
                            "description": "Allow HTTP connections from all locations",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 300,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowCockpitIn_all",
                        "properties": {
                            "description": "Allow Cockpit connections from all locations",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9090",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('newStorageAccountInfra')]",
            "location": "[resourceGroup().location]",
            "kind": "Storage",
            "apiVersion": "[variables('apiVersionStorage')]",
            "tags": {
                "displayName": "InfraStorageAccount",
                "provider": "[variables('redHatTags').provider]",
                "app": "[variables('redHatTags').app]"
            },
            "sku": {
                "name": "Premium_LRS",
                "tier": "Premium"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('infraLbPublicIpDnsLabel')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "tags": {
                "displayName": "InfraLBPublicIP",
                "provider": "[variables('redHatTags').provider]",
                "app": "[variables('redHatTags').app]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[variables('infraLbPublicIpDnsLabel')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "infraavailabilityset",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('apiVersionCompute')]",
            "tags": {
                "displayName": "InfraAvailabilitySet",
                "provider": "[variables('redHatTags').provider]",
                "app": "[variables('redHatTags').app]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('infraLoadBalancerName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "tags": {
                "displayName": "InfraLB",
                "provider": "[variables('redHatTags').provider]",
                "app": "[variables('redHatTags').app]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('infraLbPublicIpDnsLabel'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('infraPublicIpAddressId')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "OpenShiftRouterHTTP",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('infraLbFrontEndConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('infraLbBackendPoolId')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "probe": {
                                "id": "[variables('infraLbHttpProbeId')]"
                            }
                        }
                    },
                    {
                        "name": "OpenShiftRouterHTTPS",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('infraLbFrontEndConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('infraLbBackendPoolId')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "probe": {
                                "id": "[variables('infraLbHttpsProbeId')]"
                            }
                        }
                    },
                    {
                        "name": "CockpitConsole",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('infraLbFrontEndConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('infraLbBackendPoolId')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 9090,
                            "backendPort": 9090,
                            "probe": {
                                "id": "[variables('infraLbCockpitProbeId')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "httpProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "httpsProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "cockpitProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 9090,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '-nic')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "tags": {
                "displayName": "InfraNetworkInterface",
                "provider": "[variables('redHatTags').provider]",
                "app": "[variables('redHatTags').app]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('infraLoadBalancerName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftInfraHostname'), '-nsg')]"
            ],
            "copy": {
                "name": "infraNicLoop",
                "count": "[variables('infraInstanceCount')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('openshiftInfraHostname'), copyIndex(), 'ipconfig')]",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('infraLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftInfraHostname'), '-nsg'))]"
                }
            }
        },
        {
            "name": "[concat('infraVmDeployment', copyindex())]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersionLinkTemplate')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountInfra'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount'))]",
                "infraNicLoop",
                "infraavailabilityset"
            ],
            "copy": {
                "name": "infraVmLoop",
                "count": "[variables('infraInstanceCount')]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "sshKeyPath": {
                        "value": "[variables('sshKeyPath')]"
                    },
                    "sshPublicKey": {
                        "value": "[parameters('sshPublicKey')]"
                    },
                    "dataDiskSize": {
                        "value": "[variables('dataDiskSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "vmSize": {
                        "value": "[variables('infraVmSize')]"
                    },
                    "availabilitySet": {
                        "value": "infraavailabilityset"
                    },
                    "hostname": {
                        "value": "[concat(variables('openshiftInfraHostname'), '-', copyIndex())]"
                    },
                    "role": {
                        "value": "infranode"
                    },
                    "newStorageAccount": {
                        "value": "[variables('newStorageAccountInfra')]"
                    },
                    "diagStorageAccount": {
                        "value": "[variables('diagStorageAccount')]"
                    },
                    "apiVersionStorage": {
                        "value": "[variables('apiVersionStorage')]"
                    },
                    "apiVersionCompute": {
                        "value": "[variables('apiVersionCompute')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '/prepNodes')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('apiVersionCompute')]",
            "tags": {
                "displayName": "PrepInfra",
                "provider": "[variables('redHatTags').provider]",
                "app": "[variables('redHatTags').app]"
            },
            "dependsOn": [
                "[concat('infraVmDeployment', copyindex())]"
            ],
            "copy": {
                "name": "infraPrepLoop",
                "count": "[variables('infraInstanceCount')]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('nodePrepScriptUrl')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'), ' ', parameters('rhsmUsername'), ' ', variables('singlequote'), parameters('rhsmPassword'), variables('singlequote'), ' ', parameters('rhsmPoolId'))]"
                }
            }
        }
    ],
    "outputs": {
        "Openshift Infra Load Balancer FQDN": {
            "type": "string",
            "value": "[reference(variables('infraLbPublicIpDnsLabel')).dnsSettings.fqdn]"
        }
    }
}
